QPlan
=====
Rino Jose <rjose@linkedin.com>
v1.0, May 13, 2013: Added chart showing thread interaction.


Overview
--------
We need to do quarterly planning in a more systematic and efficient way. The
data from the quarterly plan should be usable from other applications. The
goal of this app is to gather, prioritize, and split a set of work items so
that items "above the cutline" can be reasonably handled by a team over a
quarter.


Problem
-------
Current quarterly planning is time intensive and very manual. Data is added to
spreadsheets in an ad hoc way. Information (like effort/role estimates) must
be continuously parsed manually by people. Even enumerating our staff needs to
be done manually.

Planning takes too long, is too much effort, involves too many people, and
results in textual data that gets stuck as text in a spreadsheet.

.Required items
- Add work item
- Specify dependencies between work items (need to flag cycles)
- Estimate work for a task (a set of roles and the number of man-weeks for
  each one)
    - Select role from predefined roles
    - Create new role
- Apply prioritization to set of work items. This can be simply manually ranking,
  or it could be something more interesting (like value-based scheduling).
- Compute manpower required for a set of work items. This will be by role
- See shortfall for each required role type for a list of
  work items
- Apply a cutline to partition work items into two sets
- Write output to a Google spreadsheet


Assumptions
-----------
- Goal is to simply identify work that a team can commit to in a quarter
- Assume available manpower is given as an input
- Won't make assignments to individual people in this app
- Won't define any tracks in this app
- Won't write to JIRA


Architecture
------------
Work items, roles, and teams should be treated as separate, independent
blocks. These blocks should be modular. We should be able to assemble these
blocks into a single app. We should design these blocks and our app so that
these blocks may also be remote services. These blocks should be stackable
libraries. Each library should have a well-defined API and a known source of
data. When persisting the data, we should have separate files for each module.

The app that combines these modules should be multithreaded. The following is
illustrative of how the threads interact:

----
  +--------+
  |  main  |
  +--------+
       |
       |        +----------+   +------+   +-------+
       +--------| listener |   | REPL |   | saver |
       |        +----------+   +------+   +-------+
       |              |           |           |
       |              |           |           |
  HTTP |              |           |           |            +---------+
  -----+------------>>+-----------+-----------+------------| web res |
       |              |           |           |            +---------+
       |              |           |           | save            |
       |              |           |           |<----------------X
  websocket request   |           |           |                           +-----------+
  -----+------------>>+-----------+-----------+---------------------------| websocket |
       |              |           |           |                           +-----------+
       |              |           |           |                                  |
       |              |           |           |                                  |
       |              |           |           | save                             |
       |              |           |           |<---------------------------------|
       |              |           |           |                                  |
       |              |           | quit      |                                  |
       |              |           |-----------+--------------------------------->X
       |              | stop      |           |                                   
       |              X<----------|           |                                   
       |                          |---------->X                                   
       |<-------------------------X                                               
       |                                                                          
       |                                       
       X                                       
----

We should be able to interact with the app via a REPL. The REPL will be in its
own thread. The app should listen for HTTP and web socket connections.

Prototypes
----------
Every prototype should have an associated micro spec. This spec should
describe the risk that we're exploring. It should also describe the approach
and the technology used. The spec should also list all of the programming
errors that occurred before the prototype worked properly.

In developing prototypes, we should strive for correctness up front. We will
run into syntax errors and compilation issues and runtime bugs and needing to
look up APIs, but we should learn from them and work to have these occur less
and less over time.

We should also use our prototypes to figure out how to test functionality.
Once we understand this, we should write tests that set up the important
cases.  Once this is in play, we should do our design and implementation,
testing each pass.

Prototype list
~~~~~~~~~~~~~~
- Create a REPL that can show status (num threads, num connections, general
  status)
- Thread management via pthreads
- Handle people with multiple skills (when trying to identify shortfall)
- Serve browser request
- Push updates to browser over web socket
- Serialize/deserialize data
- Fuzzy text search
- Web UI
- Write to a google doc


Things we're not doing
----------------------

May do later
~~~~~~~~~~~~
.Lower priority
- We need to add tags to work items. Do we need a separate tagging system?
- We need to add notes to work items
- Delete work items
- Remove person from team
- Delete person

.Even lower priority
- Need a signoff mechanism
- Need auth framework?
- Need policy for how cutline changes when reapplying priorities
- Create a set of work items in bulk
- Auto-assign work items based on role/time left
- Pull incomplete items from previous quarters
- Break work items down into tasks



Part of other app
~~~~~~~~~~~~~~~~~
- Enter people and specify role
- List people on a team by role
- Generate stats on this list of people (e.g., how many iOS devs, how many
  apps, how many QA).
  - Stats may also be available manpower
- Define team (can this be from a tag?)
- Need to define tracks for each task. This could tie into tags mechanism.
- Need to assign people to tracks. Does this mean adding a tag to a person?
- Need statistics on tracks
- Need reports on tracks. Who's assigned? Who's the lead? What's the backlog?
  What's above the cutline
- Need to create JIRA tasks automatically. Need to keep JIRA tasks in sync
  with our tasks
