QPlan
=====
Rino Jose <rjose@linkedin.com>
v0.6, May 11, 2013: Added more thoughts on technology and structure

NOTE: Revise to tighten up. Also add prototypes section to Risks.

Overview
--------
I want to have a better way of doing quarterly planning. I want to have this
be a data source for other applications here. The goal is to have a set of
prioritized items above a cutline that's reasonable to complete over a
quarter.

Problem
-------
Current quarterly planning is very time intensive and manual. Data is added to
spreadsheets in an ad hoc way. Information (like effort/role estimates) must
be continuously parsed manually. Even enumerating our staff needs to be done
manually. We're doing back-of-the-envelope calculations when we should
leverage the power of a computer.

Basically, planning takes too long, is too much effort, involves too many
people, and is difficult to revise.

Data gets stuck in the spreadsheet.

.Required items
- Add work item
- Apply prioritization to set of work items. This can be simply manually ranking,
  or it could be something more interesting (like value-based scheduling).
- Estimate work for a task (a set of roles and the number of man-weeks for
  each one)
- Compute manpower required for a set of work items. This will be by role
- Apply a cutline to partition work items into two sets
- Should be able to see shortfall for each required role type for a list of
  work items
- Select role from predefined roles

- Create new role


Solution
--------
Work that's estimated at this level should have no assignees. It is merely
used as a way to allocate resources at a high level. At some point, work can
be broken down into tasks that people can do.

Assigning work to tracks will also be done later.



Architecture
------------
We should be able to separate the naming and estimation of work from the
available manpower. In other words, we can assume that the available manpower
is given as an input.

We will need consistency in terms of the role tags, though. Should we just
call tags "dimensions"? A role is one dimension, for instance.

We shouldn't need "tracks" at this point. At this point the goals are to
capture work, estimate it, and figure out how much we can commit to. The
tracks can be defined based on what's above the cutline. It may fall into
themes, or it may not.



.Questions
Should we have modules that we can plug together to build an app? For example,
should we have a "tracks module", a "qplan module", a "priority module" and
build a complete app out of them? Or should we have these be separate apps
that interact only through the data they manipulate and share? I think the app
should be built from libraries. Each library should have a well-defined API
and source of data. We should be able to build a web app, a desktop app, or a
mobile app from the same libraries.

Technology
~~~~~~~~~~
We should create the skeleton of an app that starts a repl and that kicks off a
thread that writes data to disk periodically. One of the commands we have should
start a web server.

We should structure our app so that we can construct it from modular libraries
that plug together. Our skeleton should be an example of assembling these
modules into a threaded application.

We don't want to have a GUI for these apps. We will want to have a console
interface: commandline + ncurses. One of our first prototypes should be the
general shell of the app. We may want to write a separate spec around this.

We should experiment with networking protocols to do things like update a web
page automatically from the app.

In developing prototypes, I should strive for correctness up front. I should
strive for having it work properly the first time. I will run into syntax errors
and compilation issues and runtime bugs and needing to look up APIs, but I want
these to be less and less and less over time.

Risks
-----
- How do we do accounting for fullstack devs? We don't want to double-count
  people who have multiple skills. Need to prototype this.
- How is this persisted?
- What is the interface? Combo of web interface, command line, ncurses, app?
- How to interface with JIRA
- How do we handle multiple people being assigned to work?
- Should work be of generic kind without any assignees?
- Need some way for the people service to interact with the planning service
- Need fuzzy text search
- Persistence mechanism. Look into tpl for serializing C data
- How to tie work items with other functions?
- How to push changes from the server to a browser

Things we're not doing
======================

May do later
------------
.Lower priority
- We need to add tags to work items. Do we need a separate tagging system?
- We need to add notes to work items
- Delete work items
- Remove person from team
- Delete person

.Even lower priority
- Need a signoff mechanism
- Need auth framework?
- Need policy for how cutline changes when reapplying priorities
- Create a set of work items in bulk
- Auto-assign work items based on role/time left
- Pull incomplete items from previous quarters
- Break work items down into tasks



Part of other app
-----------------
- Enter people and specify role
- List people on a team by role
- Generate stats on this list of people (e.g., how many iOS devs, how many
  apps, how many QA).
  - Stats may also be available manpower
- Define team (can this be from a tag?)
- Need to define tracks for each task. This could tie into tags mechanism.
- Need to assign people to tracks. Does this mean adding a tag to a person?
- Need statistics on tracks
- Need reports on tracks. Who's assigned? Who's the lead? What's the backlog?
  What's above the cutline
- Need to create JIRA tasks automatically. Need to keep JIRA tasks in sync
  with our tasks

----
// vim: set syntax=asciidoc:
----
