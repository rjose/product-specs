Interprise Spec
===============
Rino Jose <rjose@linkedin.com>
v0.3, May 1, 2013: Revised from notes

Introduction
------------
The way that we've tracked projects is too manual and error prone. It relies
too much on memory and on verbal assurances. People commit to work and
timelines that they have very little confidence in. When things change, the
right people aren't always in the loop.  We should be executing like a
machine. We need a way to cleanly plan and execute projects. We need to have
confidence that we can do things well.

The goal of this application is to address these points. 

.Coordination

Daily "round table" syncups are the way that most coordination takes place.
While good for certain types of updates, this is often an inefficient use of
time. It would be much better to reserve the daily standups for items that
were extraordinary and that required some personal explanation/description.

As an issue-tracking tool, JIRA works great. As a coordination tool, it's
noisy. There's too many low level updates, too many notifications of minor
changes. There isn't the sense that one item depends on another. There isn't a
sense for how important one item is than another. JIRA is good as a triaging
tool, but not more than that.

Because of inefficient coordination, we change too many things too late
without enough insight into their cost or impact. We use "agile" as an excuse
to be ad hoc. Over time, this results in micromanaging the last parts of a
project and creates the need for special "war room" development to finish all
of the work.

An agile approach works well when tasks are small, independent, and
feature-oriented. It breaks down when there are large infrastructure pieces
and when there are many dependencies between tasks, especially when some of
this work must be performed by external teams.

For the type of work that we're currently doing, we need a touch of
waterfall. We need to put more emphasis on understanding dependencies and
managing them. If dependencies dominate a project, then they will drive the
schedule. It's important to understand and track this. We need to at least
understand the critical path even if we are resource bound. This bounds how
quickly we can finish a project (assuming estimates are good).

.Communication

Right now, there's too much and too little communication. One of our stated
behaviors was to get the right information to the right people at the right
time (the "C" in FCS). We're getting too much noise via email. We're getting
too much non-information in the syncups. We're getting too much textual
information in email. We're getting too much minutiae from JIRA.

We're not getting enough high value information. We're not getting data that
helps us understand the state of things. Our data tends to be binary. Will we
hit this date or not? Is this done or not? It's very short term and immediate.
It needs to be longer term. The data we get from each person should magnify
our understanding of where we are. It should be multiplicative. Right now,
updates tend to mask other updates. It's subtractive in many ways. Updates
require too much mental energy and effort to process.

We need a way for people to subscribe to information that they need. Some of
this can be done automatically via the dependencies between work. For example,
if a prereq will be late, everyone who depends on it should also be informed
automatically. Some of this can follow the "watch" model of JIRA (but
hopefully much lighter).


.Tracking

Our tracking is currently too manual and too textual. We tend to take notes in
syncups and add them to a spreadsheet or to a JIRA ticket. There's too much
room for interpretation. There are too many non-updates like "we're starting
to look at that now". There are too many promises like "this should be done by
the end of the week". There's very little information that lets us know how
things affect each other. 


.Cross team coordination

One of our biggest challenges is working across teams. The program and project
managers all have different methodologies but they need to work together to
figure out where things are. There's a lot of meetings, a lot of manual
updates, a lot of promises, and a lot of broken promises. 

We need to define interfaces between teams, a standard for communicating
status and information. How everyone runs is up to them, but how information
is exchanged and used should be common to everyone.

Having a common understanding of how information is reported will also help
automate some of the reporting. We can have tools provide information in the
right form. We can have the right form be entered into spreadsheets and
imported into other tools. We can send information to other systems and
process it in different ways. It opens up the power of the data and increases
our understanding of where things are. It enables us to see further and to act
at a distance. 


.Prioritization

It's been a real challenge to prioritize across teams. Every team has
different OKRs and different timelines. What's important to one team may be
low priority for another. This is a problem. We need to have a set of overall
priorities set by the executive team that the entire company needs to line up
around. There needs to be a common way of communicating priority information.
There needs to be a way to integrate priority information from external teams. 

We need to prioritize things across teams. We need to integrate with the
"targets" that Jeff focuses on. We need to find common units for what "value"
means and then make decisions to optimize it. 

We need a way to bring time into our decision-making. There are windows we need
to hit. These have value. There's a distribution of value for each product over
time. Some things magnify the value of other things.

Requirements
------------

TODO: Based on the above, add more requirements here.
TODO: Based on what's here, revise the above

- Construct and manage buffers for projects. Need to know early on how to
  reduce project scope.

- Note key events as they occur during a project (right now, this is what
  people use email for.

- View a timeline of all key events that have occurred during the life of a
  project. Be able to superimpose other information on this timeline.
  - View a schedule of work items
  - View target date for a project
  - View utility function of a project
  - View vacations for people
  - View value of people's work over time

- Need a _very_ easy way to track progress on work. Could have some sort of
  limited set where you pick one of 5 options. Maybe we could literally have
  shorthand that PMs could use when taking notes.

- Need a way to report the status of projects after updates have been made.
  This should flag tasks that are slipping and also give the impact to the
  project. 

- System should summarize information and send out a daily update. This needs
  to include changes that have happened across teams.

- Need to be able to queue up work for teams and people. This should be a
  priority queue (or at least a list that's continuously sorted by value).
  This should be for unassigned work. 

- For individual people's queues we need to be able to give an ETA for
  any work item. We should also be able to give statistics on the value of a
  person's queue.

- We should tag unplanned work so we can generate reports on how we're
  operating.

- We should also be able estimate how busy people are. This might just be
  statistics on value. Conversely, this should help us find people who can
  take on a high-value work item.

- We need to identify a key work item that isn't being done. This should be
  something that is causing high cost delays across the project. We should use
  this to identify priority inversions within the team.

- We should be able to view people's schedules. This includes vacation and
  the value of work.

- We need to simulate how projects play out. We should use historical data to
  guess at what might be late in a project and estimate the impact. We should
  use this to identify/evaluate project risks.

- Need a way to try different scenarios before committing to any one. 

- Need to generate work assignments. Could do round robin. Could do random
  selection. Could have some heuristic. Should evaluate each assignment set.
  This is an optimization problem that might be interesting to solve.

- PMs need to keep the system up to date. We need to make it easy for PMs to
  enter and update data.

- We need to integrate with JIRA and Google spreadsheets.



Data Model
----------
What do we need to store?

* People
** There are people who are doing the work
** There are people who care about when the work is done

* Team
** Can team just be a tag, or is there something special about it that we need
to model?
** A team has a name
** A team has a lead
** A team has syncups
** A team has a focused set of items
** A team has a backlog. Should be prioritized and integrated with JIRA
   somehow
** Should have POCs from other teams. These people should be notified when
high value items change.


* Project
** Has a buffer
** Has a final work item
** Includes utility function
** How do we deal with items in multiple projects?

* Work item
** Includes effort?
** Does this include high level "mission items" (like company mission/targets)
** Does this also cover projects?
** Multiple people can be working on a work item (assignments?)
** Work item updates (should these be modeled separately?). These are what
project managers would enter during status meetings.

* System Events
** Need to broadcast when the state of the system changes
** How do we implement a daily digest?
** Can we send reminders for people to update effort? It should be a one click
type of thing (like "no work done", "done", "1d left", "3d left", "Replan")


.TODO

We should sketch out a data flow diagram. Maybe we could show the purpose of
having a bus. Maybe we could show offline processing. Do we need a server that
can communicate over HTTP?




Research Questions
------------------

Scenario Questions
~~~~~~~~~~~~~~~~~~
* Do we care about history?

* When would people update their effort?

* Can someone be on multiple teams?

* Can I view info in this app as a worksheet?
** Should we start with a spreadsheet model and extend it?

* How does a production issue compare in value to other items? We need impact
  (which would be how many users). We'd also need cost per user. We might also
  need general cost. We need a way to model value in different ways.

* How do we get people who love JIRA to adopt something new? Can we focus on
  the interface and let them not even think about it?

* We need to get developers into flow. We have to stop interrupting them. We need
  to give people time to think and focus. How do we do this?

* Most people will be comfortable with a spreadsheet interface

* Will ncurses be easier to implement than a web interface?


Technical Quesitons
~~~~~~~~~~~~~~~~~~~
* How do we manage the relationship between work items and updates to them?

* What's the best way to model utility functions?
** It should be more than a function of one project. There should by
multiplicative effects
** We can do a simplification and assume utility functions are linear as a
starting point

* Are there semantics beyond a request/response model like HTTP?

* Can we integrate with LDAP?

* Can we integrate with JIRA? What can we sync from JIRA?

* Should we store everything in memory and then write to disk in the background?



Scenarios
---------

Add people to system
~~~~~~~~~~~~~~~~~~~~
Ideally, we can hook into our LDAP system and look up people easily by name.
We should be able to autofill information this way.

Define teams
~~~~~~~~~~~~
I'd define an Austin team, a Tenor team, a Tablet team, etc. We should be able
to add people who are already in the system to a team. We should also be able
to add people from LDAP. Adding someone from LDAP should also add them to the
system.


TODO: What's the lifecycle of a team look like?

Import work from JIRA
~~~~~~~~~~~~~~~~~~~~~
We need to identify a tag in JIRA that we can associate with a team. Ideally,
we can pull tasks over via HTTP calls. If this doesn't work, we should try
exporting to Excel and then import data. This is less preferred, but we could
do it.

Add work
~~~~~~~~
All work items need to be in JIRA. This is the only way we can have
consistency. Adding work means adding it to JIRA first.

Even so, we should have another way to add work. This ways should be the
underlying way that JIRA adds work as well. 

You should be able to specify a skill for a role. 

Assign work
~~~~~~~~~~~
Assigning work should be done in JIRA. There should be an underlying way to do
this as well. We need to make sure the effort left is entered.

Schedule work
~~~~~~~~~~~~~
Work should be scheduled automatically whenever its assigned or whenever
effort left is updated. Marking work as done should mark should automatically
set the effort left to zero. The effort left needs to be pulled from JIRA.

Start and end dates should be updated for each work item. Work should be scheduled
by priority according to person. The scheduling should take vacations and
weekends into account. The units of the work are in days. Fractional days are
allowed.

There isn't the concept of a schedule as a data object. A schedule is merely a
view of things that can occur in time. Things that can be viewed on a
timeline/schedule must have certain data associated with them: start date
(fractional) and duration (fractional). Items that have zero duration are
events. These are represented differently on a schedule.  

Work is scheduled periodically when certain events occur (work assigned, work
effort updated, every 4 hours).

As work items are scheduled, their completed dates are updated.

Unassigned work is _not_ scheduled. 

Automatic updates
~~~~~~~~~~~~~~~~~
For work with value over a certain level, updates are sent out for certain
events (estimated date changes, work is marked as complete, work assignment
changes). Updates are sent to the leads for the team in which they occured as
well as to every POC specified for the team.

Specifying dependencies
~~~~~~~~~~~~~~~~~~~~~~~
Dependencies between work items can be specified.

You can create ad hoc work that needs to be assigned. You can specify the JIRA
ticket for a prereq. You should be able to get typeahead for work that can be
a prereq. When searching for work, items in the team should be presented
first.

You can also say that something depends on a work item.

CPM analysis
~~~~~~~~~~~~

Define QA work
~~~~~~~~~~~~~~
*****
Q: Should the concept of QA work be built into the system, or should there be a
separate, generic mechanism for it?

A: I think a separate, generic mechanism. If the QA were built in, then people
would try to use it to do different things.
*****

You should be able to map an "Add QA" task to a list of work items. The
mapping is the generic mechanism. The functions can be specified in terms of a
DSL (at some point). For now, a function should do.
